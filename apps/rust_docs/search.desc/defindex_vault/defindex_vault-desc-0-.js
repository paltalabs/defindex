searchState.loadedDescShard("defindex_vault", 0, "DeFindexVaultClient is a client for calling the contract …\nHandles user deposits into the DeFindex Vault and …\nExecutes an emergency withdrawal from a specific strategy.\nReturns the current idle funds, representing the total …\nReturns the current invested funds, representing the total …\nReturns the total managed funds of the vault, including …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis function extends the contract’s time-to-live and …\nRetrieves the list of assets managed by the DeFindex Vault.\nRetrieves the current emergency manager address for the …\nRetrieves the current fee receiver address for the vault.\nRetrieves the current manager address for the vault.\nInitializes the DeFindex Vault contract with the required …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExecutes the investment of the vault’s idle funds based …\nPauses a strategy to prevent it from being used in the …\nRebalances the vault by executing a series of instructions.\nSets the emergency manager for the vault.\nSets the fee receiver for the vault.\nSets the manager for the vault.\nHandles user deposits into the DeFindex Vault and …\nExecutes an emergency withdrawal from a specific strategy.\nReturns the current idle funds, representing the total …\nReturns the current invested funds, representing the total …\nReturns the total managed funds of the vault, including …\nThis function extends the contract’s time-to-live and …\nRetrieves the list of assets managed by the DeFindex Vault.\nRetrieves the current emergency manager address for the …\nRetrieves the current fee receiver address for the vault.\nRetrieves the current manager address for the vault.\nInitializes the DeFindex Vault contract with the required …\nExecutes the investment of the vault’s idle funds based …\nPauses a strategy to prevent it from being used in the …\nRebalances the vault by executing a series of instructions.\nSets the emergency manager for the vault.\nSets the fee receiver for the vault.\nSets the manager for the vault.\nUnpauses a previously paused strategy.\nHandles the withdrawal process for a specified number of …\nHandles user deposits into the DeFindex Vault and …\nExecutes an emergency withdrawal from a specific strategy.\nReturns the current idle funds, representing the total …\nReturns the current invested funds, representing the total …\nReturns the total managed funds of the vault, including …\nThis function extends the contract’s time-to-live and …\nRetrieves the list of assets managed by the DeFindex Vault.\nRetrieves the current emergency manager address for the …\nRetrieves the current fee receiver address for the vault.\nRetrieves the current manager address for the vault.\nInitializes the DeFindex Vault contract with the required …\nExecutes the investment of the vault’s idle funds based …\nPauses a strategy to prevent it from being used in the …\nRebalances the vault by executing a series of instructions.\nSets the emergency manager for the vault.\nSets the fee receiver for the vault.\nSets the manager for the vault.\nUnpauses a previously paused strategy.\nHandles the withdrawal process for a specified number of …\nUnpauses a previously paused strategy.\nHandles the withdrawal process for a specified number of …")