#![no_std]
use soroban_sdk::{contractclient, contractspecfn, Address, Env, Val, Vec};
pub struct Spec;

mod error;
pub mod event;
pub use error::StrategyError;

#[contractspecfn(name = "Spec", export = false)]
#[contractclient(name = "DeFindexStrategyClient")]

/// Trait that defines the required methods for implementing a DeFindex strategy.
///
/// Each strategy contract must implement this trait to ensure compatibility with the
/// DeFindex vault. The trait defines essential functions for initialization, asset management,
/// and yield generation, enabling DeFindex to interact with various DeFi strategies
/// in a standardized way.
pub trait DeFindexStrategyTrait {
    /// Initializes the strategy with the given parameters.
    ///
    /// It sets up the strategy's underlying asset and any additional parameters required for the strategy.
    ///
    /// # Parameters
    /// - `env`: The execution environment.
    /// - `asset`: The address of the underlying asset that this strategy will manage.
    /// - `init_args`: A vector of additional arguments, which may vary depending on the strategy's requirements (e.g., configurations, addresses).
    fn __constructor(env: Env, asset: Address, init_args: Vec<Val>);

    /// Returns the underlying asset address managed by the strategy.
    ///
    /// This function provides the address of the asset that this strategy is managing. It is used
    /// by the DeFindex vault to determine which asset is associated with this strategy.
    ///
    /// # Parameters
    /// - `env`: The execution environment.
    ///
    /// # Returns
    /// - `Ok(Address)` containing the asset address.
    /// - `Err(StrategyError)` if the asset address cannot be retrieved.
    fn asset(env: Env) -> Result<Address, StrategyError>;

    /// Deposits the specified amount of the asset into the strategy.
    ///
    /// This function allows the DeFindex vault to deposit assets into the strategy.
    ///
    /// # Parameters
    /// - `env`: The execution environment.
    /// - `amount`: The amount of the underlying asset to deposit into the strategy.
    /// - `from`: The address from which the asset will be transferred (usually the DeFindex vault).
    ///
    /// # Returns
    /// - `Ok(i128)` containing the balance of the `from` address after the deposit.
    /// - `Err(StrategyError)` if the deposit fails for any reason.
    ///
    /// It is very important that the return is the balance of the `from` address
    /// in the context of DeFindex. This ensures that the vault can keep track of the strategy's status,
    fn deposit(env: Env, amount: i128, from: Address) -> Result<i128, StrategyError>;

    /// Harvests yields generated by the strategy.
    ///
    /// This function triggers any necessary actions required to generate or claim yields from
    /// the underlying DeFi protocol or strategy. It can be used to reinvest rewards, claim interest,
    /// or perform other actions that maximize returns.
    ///
    /// # Parameters
    /// - `env`: The execution environment.
    /// - `from`: The address that is triggering the harvest.
    ///
    /// # Returns
    /// - `Ok(())` if the harvest is successful.
    /// - `Err(StrategyError)` if the harvest fails.
    fn harvest(env: Env, from: Address) -> Result<(), StrategyError>;

    /// Returns the current balance of the underlying asset in the strategy.
    ///
    /// This function provides the current balance of the underlying asset that is managed by
    /// the strategy on behalf of the specified address. It is used to track the assets held in the strategy.
    ///
    /// # Parameters
    /// - `env`: The execution environment.
    /// - `from`: The address for which to retrieve the balance (usually the DeFindex vault).
    ///
    /// # Returns
    /// - `Ok(i128)` containing the balance of the underlying asset.
    /// - `Err(StrategyError)` if the balance cannot be retrieved.
    ///
    /// It is important to note that the return value should be in terms of the underlying asset
    /// and not some kind of share or derivative. This ensures that the balance accurately reflects
    /// the amount of the actual asset managed by the strategy.
    fn balance(env: Env, from: Address) -> Result<i128, StrategyError>;

    /// Withdraws the specified amount of the underlying asset from the strategy.
    ///
    /// This function allows the DeFindex vault to withdraw assets from the strategy.
    ///
    /// # Parameters
    /// - `env`: The execution environment.
    /// - `amount`: The amount of the underlying asset to withdraw.
    /// - `from`: The address from which to withdraw the asset (usually the DeFindex vault).
    /// - `to`: The address to which the asset will be transferred (usually the DeFindex vault).
    ///
    /// # Returns
    /// - `Ok(i128)` containing the balance of the `from` address after the withdraw.
    /// - `Err(StrategyError)` if the withdrawal fails (e.g., insufficient balance).
    ///
    /// It is very important that the return is the balance of the `from` address
    /// in the context of DeFindex. This ensures that the vault can keep track of the strategy's status,
    fn withdraw(env: Env, amount: i128, from: Address, to: Address) -> Result<i128, StrategyError>;
}
